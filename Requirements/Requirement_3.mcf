% Requirement:
%
%   "The low-vacuum chamber can either have the door to the high-vacuum chamber
%   or the door(s) to the sluice(s) opened simultaneously."
%
% Description:
%
%   The instruct_door(dH, sO) action must not happen unless the alternative doors
%   within the same chamber are closed. The instruct_door action can only occur
%   for either dLI or dLO if the door to the high-vacuum chamber (dH) is closed.
%   A variable (e.g. S_dAI, S_dAO, etc.) is used to keep track of the state of
%   the door.

nu X(S_dLI:DoorState = sC, S_dLO:DoorState = sC, S_dH:DoorState = sC) . (
    (forall ds:DoorState . [instruct_door(dLI, ds)] X(ds, S_dLO, S_dH)) &&
    (forall ds:DoorState . [instruct_door(dLO, ds)] X(S_dLI, ds, S_dH)) &&
    (forall ds:DoorState . [instruct_door(dH , ds)] X(S_dLI, S_dLO, ds)) &&
	(forall ds:DoorState . [instruct_door(dAI, ds)] X(S_dLI, S_dLO, S_dH)) &&
	(forall ds:DoorState . [instruct_door(dAO, ds)] X(S_dLI, S_dLO, S_dH)) &&
    [!exists d:Door, ds:DoorState . instruct_door(d, ds)] X(S_dLI, S_dLO, S_dH) &&

    [instruct_door(dH , sO)] val(S_dLO  == sC && S_dLI == sC) &&
    [instruct_door(dLI, sO)] val(S_dH == sC) &&
    [instruct_door(dLO, sO)] val(S_dH == sC)
)
